#BlueJ class context
comment0.target=Point
comment0.text=\ \ \r\n\ \ Class\ Point\:\ This\ is\ a\ data-type\ class\ to\ define\ a\ point\ in\ the\ \r\n\ cartesian\ plane\ defined\ by\ their\ coordinates\ x\ and\ y.\ \r\n\ \ \r\n\ \ @author\ IIP\ -\ Lab\ Midterm\ Exam\r\n\ \ @version\ Academic\ Year\ 2021/22\r\n
comment1.params=px\ py
comment1.target=Point(double,\ double)
comment1.text=\ Create\ a\ Point\ with\ abscissa\ px\ and\ ordinate\ py.\ \r\n\ \ @param\ px\ double,\ the\ abscissa.\r\n\ \ @param\ py\ double,\ the\ ordinate.\r\n
comment10.params=o
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\r\n\ Checks\ if\ the\ current\ object\ of\ the\ class\ Point\r\n\ referenced\ by\ this\ is\ equal\ to\ another\ point\r\n\ passed\ as\ argument\ but\ as\ a\ generic\ reference\ to\ objects\ of\r\n\ the\ class\ Object.\r\n\ @param\ o\ Object,\ reference\ to\ the\ object\ to\ be\ compared\ with\ this.\r\n\ @return\ boolean,\ true\ if\ o\ is\ a\ reference\ of\ the\ class\ Point\ and\r\n\ \ \ \ \ \ the\ values\ of\ both\ coordinates\ are\ equal,\ else\ returns\ false.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ \r\n\ Returns\ an\ object\ of\ the\ class\ String\ containing\ a\ representation\ of\ the\r\n\ \ current\ point\ with\ the\ common\ format\ (abscissa,ordinate).\r\n\ \ @return\ String,\ the\ result.\r\n
comment12.params=p
comment12.target=Point\ gradient(Point)
comment12.text=\ \r\n\ Given\ a\ Point\ p,\ which\ together\ with\ the\ current\ Point\ (this)\r\n\ \ is\ part\ of\ a\ straight\ line\ with\ gradient\ m,\ it\ returns\ this,\ p\ \r\n\ \ or\ the\ Point\ (0.0,\ 0.0)\ if\ the\ gradient\ m\ of\ the\ line\ is\ negative,\ \r\n\ \ positive\ or\ zero,\ respectively.\r\n\ \ Precondition\:\ this\ and\ p\ abscissas\ are\ different\ \ \r\n\ \ @param\ p\ Point,\ the\ other\ Point.\r\n\ \ @return\ Point,\ the\ resultado.\r\n
comment2.params=
comment2.target=Point()
comment2.text=Create\ a\ Point\ with\ abscissa\ 0.0\ and\ ordinate\ 0.0.
comment3.params=
comment3.target=double\ getX()
comment3.text=\ Return\ the\ abscissa\ of\ the\ Point\ this.\ \r\n\ \ @return\ double,\ the\ abscissa.\ \ \ \ \ \ \r\n
comment4.params=
comment4.target=double\ getY()
comment4.text=\ Return\ the\ ordinate\ of\ the\ Point\ this.\ \r\n\ \ @return\ double,\ the\ ordinate.\r\n
comment5.params=px
comment5.target=void\ setX(double)
comment5.text=\ Update\ the\ abscissa\ of\ this\ to\ px.\r\n\ \ @param\ px\ double,\ the\ new\ abscissa.\r\n
comment6.params=py
comment6.target=void\ setY(double)
comment6.text=\ Update\ the\ ordinate\ of\ this\ to\ py.\r\n\ \ @param\ py\ double,\ the\ new\ ordinate.\r\n
comment7.params=px\ py
comment7.target=void\ move(double,\ double)
comment7.text=\ Updates\ both\ coordinates\:\ the\ abscissa\ and\ the\ ordinate.\r\n\ \ @param\ px\ double,\ the\ new\ value\ for\ the\ abscissa.\r\n\ \ @param\ py\ double,\ the\ new\ value\ for\ the\ ordinate\r\n
comment8.params=p
comment8.target=double\ distance(Point)
comment8.text=\ Returns\ the\ distance\ between\ two\ points,\ the\ current\ one\ \r\n\ \ and\ another\ one\ passed\ as\ parameter.\r\n\ \ @param\ p\ Point,\ the\ other\ Point.\r\n\ \ @return\ double,\ the\ distance\ between\ this\ and\ p.\r\n
comment9.params=
comment9.target=double\ distance()
comment9.text=\ Returns\ the\ distance\ between\ two\ points,\ the\ current\ one\ \r\n\ \ and\ another\ the\ origin\ (0.0,\ 0.0).\ \ \ \ \ \r\n\ \ @return\ double,\ the\ distance.\r\n
numComments=13
